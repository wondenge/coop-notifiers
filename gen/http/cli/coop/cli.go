// Code generated by goa v3.1.3, DO NOT EDIT.
//
// coop HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/coop-notifiers/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	"github.com/go-kit/kit/endpoint"
	connectc "github.com/wondenge/coop-notifiers/gen/http/connect/client"
	healthc "github.com/wondenge/coop-notifiers/gen/http/health/client"
	goahttp "goa.design/goa/v3/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `health show
connect (ift-account-to-account|pesa-link-send-to-account|pesa-link-send-to-phone|send-to-m-pesa)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` health show` + "\n" +
		os.Args[0] + ` connect ift-account-to-account --body '{
      "Destinations": {
         "Amount": 777,
         "MobileNumber": "2547xxxxxxxx",
         "Narration": "Electricity Payment",
         "ReferenceNumber": "40ca18c6765086089a1_1",
         "ResponseCode": "0",
         "ResponseDescription": "Success",
         "TransactionID": "116e68e0af0c38zY_NKE7HBQEIL"
      },
      "MessageCode": "0",
      "MessageDateTime": "2017-12-04T09:27:00",
      "MessageDescription": "FULL SUCCESS",
      "MessageReference": "40ca18c6765086089a1",
      "Source": {
         "AccountNumber": "54321987654321",
         "Amount": 777,
         "Narration": "Electricity Payment",
         "ResponseCode": "0",
         "ResponseDescription": "Success",
         "TransactionCurrency": "KES"
      }
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (endpoint.Endpoint, interface{}, error) {
	var (
		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthShowFlags = flag.NewFlagSet("show", flag.ExitOnError)

		connectFlags = flag.NewFlagSet("connect", flag.ContinueOnError)

		connectIFTAccountToAccountFlags    = flag.NewFlagSet("ift-account-to-account", flag.ExitOnError)
		connectIFTAccountToAccountBodyFlag = connectIFTAccountToAccountFlags.String("body", "REQUIRED", "")

		connectPesaLinkSendToAccountFlags    = flag.NewFlagSet("pesa-link-send-to-account", flag.ExitOnError)
		connectPesaLinkSendToAccountBodyFlag = connectPesaLinkSendToAccountFlags.String("body", "REQUIRED", "")

		connectPesaLinkSendToPhoneFlags    = flag.NewFlagSet("pesa-link-send-to-phone", flag.ExitOnError)
		connectPesaLinkSendToPhoneBodyFlag = connectPesaLinkSendToPhoneFlags.String("body", "REQUIRED", "")

		connectSendToMPesaFlags    = flag.NewFlagSet("send-to-m-pesa", flag.ExitOnError)
		connectSendToMPesaBodyFlag = connectSendToMPesaFlags.String("body", "REQUIRED", "")
	)
	healthFlags.Usage = healthUsage
	healthShowFlags.Usage = healthShowUsage

	connectFlags.Usage = connectUsage
	connectIFTAccountToAccountFlags.Usage = connectIFTAccountToAccountUsage
	connectPesaLinkSendToAccountFlags.Usage = connectPesaLinkSendToAccountUsage
	connectPesaLinkSendToPhoneFlags.Usage = connectPesaLinkSendToPhoneUsage
	connectSendToMPesaFlags.Usage = connectSendToMPesaUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "health":
			svcf = healthFlags
		case "connect":
			svcf = connectFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "health":
			switch epn {
			case "show":
				epf = healthShowFlags

			}

		case "connect":
			switch epn {
			case "ift-account-to-account":
				epf = connectIFTAccountToAccountFlags

			case "pesa-link-send-to-account":
				epf = connectPesaLinkSendToAccountFlags

			case "pesa-link-send-to-phone":
				epf = connectPesaLinkSendToPhoneFlags

			case "send-to-m-pesa":
				epf = connectSendToMPesaFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint endpoint.Endpoint
		err      error
	)
	{
		switch svcn {
		case "health":
			c := healthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data = nil
			}
		case "connect":
			c := connectc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "ift-account-to-account":
				endpoint = c.IFTAccountToAccount()
				data, err = connectc.BuildIFTAccountToAccountPayload(*connectIFTAccountToAccountBodyFlag)
			case "pesa-link-send-to-account":
				endpoint = c.PesaLinkSendToAccount()
				data, err = connectc.BuildPesaLinkSendToAccountPayload(*connectPesaLinkSendToAccountBodyFlag)
			case "pesa-link-send-to-phone":
				endpoint = c.PesaLinkSendToPhone()
				data, err = connectc.BuildPesaLinkSendToPhonePayload(*connectPesaLinkSendToPhoneBodyFlag)
			case "send-to-m-pesa":
				endpoint = c.SendToMPesa()
				data, err = connectc.BuildSendToMPesaPayload(*connectSendToMPesaBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `Service is the health service interface.
Usage:
    %s [globalflags] health COMMAND [flags]

COMMAND:
    show: Health check endpoint.

Additional help:
    %s health COMMAND --help
`, os.Args[0], os.Args[0])
}
func healthShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] health show

Health check endpoint.

Example:
    `+os.Args[0]+` health show
`, os.Args[0])
}

// connectUsage displays the usage of the connect command and its subcommands.
func connectUsage() {
	fmt.Fprintf(os.Stderr, `Service is the connect service interface.
Usage:
    %s [globalflags] connect COMMAND [flags]

COMMAND:
    ift-account-to-account: IFTAccountToAccount Early Hints Callback Request
    pesa-link-send-to-account: PesaLinkSendToAccount Early Hints Callback Request
    pesa-link-send-to-phone: PesaLinkSendToPhone Early Hints Callback Request
    send-to-m-pesa: SendToMPesa Early Hints Callback Request

Additional help:
    %s connect COMMAND --help
`, os.Args[0], os.Args[0])
}
func connectIFTAccountToAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect ift-account-to-account -body JSON

IFTAccountToAccount Early Hints Callback Request
    -body JSON: 

Example:
    `+os.Args[0]+` connect ift-account-to-account --body '{
      "Destinations": {
         "Amount": 777,
         "MobileNumber": "2547xxxxxxxx",
         "Narration": "Electricity Payment",
         "ReferenceNumber": "40ca18c6765086089a1_1",
         "ResponseCode": "0",
         "ResponseDescription": "Success",
         "TransactionID": "116e68e0af0c38zY_NKE7HBQEIL"
      },
      "MessageCode": "0",
      "MessageDateTime": "2017-12-04T09:27:00",
      "MessageDescription": "FULL SUCCESS",
      "MessageReference": "40ca18c6765086089a1",
      "Source": {
         "AccountNumber": "54321987654321",
         "Amount": 777,
         "Narration": "Electricity Payment",
         "ResponseCode": "0",
         "ResponseDescription": "Success",
         "TransactionCurrency": "KES"
      }
   }'
`, os.Args[0])
}

func connectPesaLinkSendToAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect pesa-link-send-to-account -body JSON

PesaLinkSendToAccount Early Hints Callback Request
    -body JSON: 

Example:
    `+os.Args[0]+` connect pesa-link-send-to-account --body '{
      "CallBackUrl": "https://yourdomain.com/ft-callback",
      "Destinations": {
         "Amount": 777,
         "MobileNumber": "2547xxxxxxxx",
         "Narration": "Electricity Payment",
         "ReferenceNumber": "40ca18c6765086089a1_1",
         "ResponseCode": "0",
         "ResponseDescription": "Success",
         "TransactionID": "116e68e0af0c38zY_NKE7HBQEIL"
      },
      "MessageCode": "0",
      "MessageDateTime": "2017-12-04T09:27:00",
      "MessageDescription": "FULL SUCCESS",
      "MessageReference": "40ca18c6765086089a1",
      "Source": {
         "AccountNumber": "54321987654321",
         "Amount": 777,
         "Narration": "Electricity Payment",
         "ResponseCode": "0",
         "ResponseDescription": "Success",
         "TransactionCurrency": "KES"
      }
   }'
`, os.Args[0])
}

func connectPesaLinkSendToPhoneUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect pesa-link-send-to-phone -body JSON

PesaLinkSendToPhone Early Hints Callback Request
    -body JSON: 

Example:
    `+os.Args[0]+` connect pesa-link-send-to-phone --body '{
      "Destinations": [
         {
            "Amount": 777,
            "MobileNumber": "2547xxxxxxxx",
            "Narration": "Electricity Payment",
            "ReferenceNumber": "40ca18c6765086089a1_1",
            "ResponseCode": "0",
            "ResponseDescription": "Success",
            "TransactionID": "116e68e0af0c38zY_NKE7HBQEIL"
         }
      ],
      "MessageCode": "0",
      "MessageDateTime": "2017-12-04T09:27:00",
      "MessageDescription": "FULL SUCCESS",
      "MessageReference": "40ca18c6765086089a1",
      "Source": {
         "AccountNumber": "54321987654321",
         "Amount": 777,
         "Narration": "Electricity Payment",
         "ResponseCode": "0",
         "ResponseDescription": "Success",
         "TransactionCurrency": "KES"
      }
   }'
`, os.Args[0])
}

func connectSendToMPesaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] connect send-to-m-pesa -body JSON

SendToMPesa Early Hints Callback Request
    -body JSON: 

Example:
    `+os.Args[0]+` connect send-to-m-pesa --body '{
      "CallBackUrl": "https://yourdomain.com/ft-callback",
      "Destinations": {
         "Amount": 777,
         "MobileNumber": "2547xxxxxxxx",
         "Narration": "Electricity Payment",
         "ReferenceNumber": "40ca18c6765086089a1_1",
         "ResponseCode": "0",
         "ResponseDescription": "Success",
         "TransactionID": "116e68e0af0c38zY_NKE7HBQEIL"
      },
      "MessageCode": "0",
      "MessageDateTime": "2017-12-04T09:27:00",
      "MessageDescription": "FULL SUCCESS",
      "MessageReference": "40ca18c6765086089a1",
      "Source": {
         "AccountNumber": "54321987654321",
         "Amount": 777,
         "Narration": "Electricity Payment",
         "ResponseCode": "0",
         "ResponseDescription": "Success",
         "TransactionCurrency": "KES"
      }
   }'
`, os.Args[0])
}
