// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/coop-notifiers/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	connect "github.com/wondenge/coop-notifiers/gen/connect"
	goahttp "goa.design/goa/v3/http"
)

// BuildIFTAccountToAccountRequest instantiates a HTTP request object with
// method and path set to call the "connect" service "IFTAccountToAccount"
// endpoint
func (c *Client) BuildIFTAccountToAccountRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IFTAccountToAccountConnectPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("connect", "IFTAccountToAccount", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIFTAccountToAccountRequest returns an encoder for requests sent to the
// connect IFTAccountToAccount server.
func EncodeIFTAccountToAccountRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*connect.IFTAccountToAccountCallbackRequest)
		if !ok {
			return goahttp.ErrInvalidType("connect", "IFTAccountToAccount", "*connect.IFTAccountToAccountCallbackRequest", v)
		}
		body := NewIFTAccountToAccountRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("connect", "IFTAccountToAccount", err)
		}
		return nil
	}
}

// DecodeIFTAccountToAccountResponse returns a decoder for responses returned
// by the connect IFTAccountToAccount endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeIFTAccountToAccountResponse may return the following errors:
//	- "partial_success" (type *goa.ServiceError): http.StatusMultiStatus
//	- "full_failure" (type *goa.ServiceError): http.StatusMultiStatus
//	- error: internal error
func DecodeIFTAccountToAccountResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("connect", "IFTAccountToAccount", err)
			}
			return body, nil
		case http.StatusMultiStatus:
			en := resp.Header.Get("goa-error")
			switch en {
			case "partial_success":
				var (
					body IFTAccountToAccountPartialSuccessResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("connect", "IFTAccountToAccount", err)
				}
				err = ValidateIFTAccountToAccountPartialSuccessResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("connect", "IFTAccountToAccount", err)
				}
				return nil, NewIFTAccountToAccountPartialSuccess(&body)
			case "full_failure":
				var (
					body IFTAccountToAccountFullFailureResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("connect", "IFTAccountToAccount", err)
				}
				err = ValidateIFTAccountToAccountFullFailureResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("connect", "IFTAccountToAccount", err)
				}
				return nil, NewIFTAccountToAccountFullFailure(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("connect", "IFTAccountToAccount", resp.StatusCode, string(body))
			}
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("connect", "IFTAccountToAccount", resp.StatusCode, string(body))
		}
	}
}

// BuildPesaLinkSendToAccountRequest instantiates a HTTP request object with
// method and path set to call the "connect" service "PesaLinkSendToAccount"
// endpoint
func (c *Client) BuildPesaLinkSendToAccountRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PesaLinkSendToAccountConnectPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("connect", "PesaLinkSendToAccount", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePesaLinkSendToAccountRequest returns an encoder for requests sent to
// the connect PesaLinkSendToAccount server.
func EncodePesaLinkSendToAccountRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*connect.PesaLinkSendToAccountCallbackRequest)
		if !ok {
			return goahttp.ErrInvalidType("connect", "PesaLinkSendToAccount", "*connect.PesaLinkSendToAccountCallbackRequest", v)
		}
		body := NewPesaLinkSendToAccountRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("connect", "PesaLinkSendToAccount", err)
		}
		return nil
	}
}

// DecodePesaLinkSendToAccountResponse returns a decoder for responses returned
// by the connect PesaLinkSendToAccount endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodePesaLinkSendToAccountResponse may return the following errors:
//	- "partial_success" (type *goa.ServiceError): http.StatusMultiStatus
//	- "full_failure" (type *goa.ServiceError): http.StatusMultiStatus
//	- error: internal error
func DecodePesaLinkSendToAccountResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("connect", "PesaLinkSendToAccount", err)
			}
			return body, nil
		case http.StatusMultiStatus:
			en := resp.Header.Get("goa-error")
			switch en {
			case "partial_success":
				var (
					body PesaLinkSendToAccountPartialSuccessResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("connect", "PesaLinkSendToAccount", err)
				}
				err = ValidatePesaLinkSendToAccountPartialSuccessResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("connect", "PesaLinkSendToAccount", err)
				}
				return nil, NewPesaLinkSendToAccountPartialSuccess(&body)
			case "full_failure":
				var (
					body PesaLinkSendToAccountFullFailureResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("connect", "PesaLinkSendToAccount", err)
				}
				err = ValidatePesaLinkSendToAccountFullFailureResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("connect", "PesaLinkSendToAccount", err)
				}
				return nil, NewPesaLinkSendToAccountFullFailure(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("connect", "PesaLinkSendToAccount", resp.StatusCode, string(body))
			}
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("connect", "PesaLinkSendToAccount", resp.StatusCode, string(body))
		}
	}
}

// BuildPesaLinkSendToPhoneRequest instantiates a HTTP request object with
// method and path set to call the "connect" service "PesaLinkSendToPhone"
// endpoint
func (c *Client) BuildPesaLinkSendToPhoneRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PesaLinkSendToPhoneConnectPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("connect", "PesaLinkSendToPhone", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePesaLinkSendToPhoneRequest returns an encoder for requests sent to the
// connect PesaLinkSendToPhone server.
func EncodePesaLinkSendToPhoneRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*connect.PesaLinkSendToPhoneCallbackRequest)
		if !ok {
			return goahttp.ErrInvalidType("connect", "PesaLinkSendToPhone", "*connect.PesaLinkSendToPhoneCallbackRequest", v)
		}
		body := NewPesaLinkSendToPhoneRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("connect", "PesaLinkSendToPhone", err)
		}
		return nil
	}
}

// DecodePesaLinkSendToPhoneResponse returns a decoder for responses returned
// by the connect PesaLinkSendToPhone endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodePesaLinkSendToPhoneResponse may return the following errors:
//	- "partial_success" (type *goa.ServiceError): http.StatusMultiStatus
//	- "full_failure" (type *goa.ServiceError): http.StatusMultiStatus
//	- error: internal error
func DecodePesaLinkSendToPhoneResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("connect", "PesaLinkSendToPhone", err)
			}
			return body, nil
		case http.StatusMultiStatus:
			en := resp.Header.Get("goa-error")
			switch en {
			case "partial_success":
				var (
					body PesaLinkSendToPhonePartialSuccessResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("connect", "PesaLinkSendToPhone", err)
				}
				err = ValidatePesaLinkSendToPhonePartialSuccessResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("connect", "PesaLinkSendToPhone", err)
				}
				return nil, NewPesaLinkSendToPhonePartialSuccess(&body)
			case "full_failure":
				var (
					body PesaLinkSendToPhoneFullFailureResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("connect", "PesaLinkSendToPhone", err)
				}
				err = ValidatePesaLinkSendToPhoneFullFailureResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("connect", "PesaLinkSendToPhone", err)
				}
				return nil, NewPesaLinkSendToPhoneFullFailure(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("connect", "PesaLinkSendToPhone", resp.StatusCode, string(body))
			}
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("connect", "PesaLinkSendToPhone", resp.StatusCode, string(body))
		}
	}
}

// BuildSendToMPesaRequest instantiates a HTTP request object with method and
// path set to call the "connect" service "SendToMPesa" endpoint
func (c *Client) BuildSendToMPesaRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SendToMPesaConnectPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("connect", "SendToMPesa", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSendToMPesaRequest returns an encoder for requests sent to the connect
// SendToMPesa server.
func EncodeSendToMPesaRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*connect.SendToMpesaCallbackRequest)
		if !ok {
			return goahttp.ErrInvalidType("connect", "SendToMPesa", "*connect.SendToMpesaCallbackRequest", v)
		}
		body := NewSendToMPesaRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("connect", "SendToMPesa", err)
		}
		return nil
	}
}

// DecodeSendToMPesaResponse returns a decoder for responses returned by the
// connect SendToMPesa endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSendToMPesaResponse may return the following errors:
//	- "partial_success" (type *goa.ServiceError): http.StatusMultiStatus
//	- "full_failure" (type *goa.ServiceError): http.StatusMultiStatus
//	- error: internal error
func DecodeSendToMPesaResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("connect", "SendToMPesa", err)
			}
			return body, nil
		case http.StatusMultiStatus:
			en := resp.Header.Get("goa-error")
			switch en {
			case "partial_success":
				var (
					body SendToMPesaPartialSuccessResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("connect", "SendToMPesa", err)
				}
				err = ValidateSendToMPesaPartialSuccessResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("connect", "SendToMPesa", err)
				}
				return nil, NewSendToMPesaPartialSuccess(&body)
			case "full_failure":
				var (
					body SendToMPesaFullFailureResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("connect", "SendToMPesa", err)
				}
				err = ValidateSendToMPesaFullFailureResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("connect", "SendToMPesa", err)
				}
				return nil, NewSendToMPesaFullFailure(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("connect", "SendToMPesa", resp.StatusCode, string(body))
			}
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("connect", "SendToMPesa", resp.StatusCode, string(body))
		}
	}
}

// marshalConnectSourceAccountCallbackRequestToSourceAccountCallbackRequestRequestBody
// builds a value of type *SourceAccountCallbackRequestRequestBody from a value
// of type *connect.SourceAccountCallbackRequest.
func marshalConnectSourceAccountCallbackRequestToSourceAccountCallbackRequestRequestBody(v *connect.SourceAccountCallbackRequest) *SourceAccountCallbackRequestRequestBody {
	res := &SourceAccountCallbackRequestRequestBody{
		AccountNumber:       v.AccountNumber,
		Amount:              v.Amount,
		TransactionCurrency: v.TransactionCurrency,
		Narration:           v.Narration,
		ResponseCode:        v.ResponseCode,
		ResponseDescription: v.ResponseDescription,
	}

	return res
}

// marshalConnectDestinationAccountCallbackRequestToDestinationAccountCallbackRequestRequestBody
// builds a value of type *DestinationAccountCallbackRequestRequestBody from a
// value of type *connect.DestinationAccountCallbackRequest.
func marshalConnectDestinationAccountCallbackRequestToDestinationAccountCallbackRequestRequestBody(v *connect.DestinationAccountCallbackRequest) *DestinationAccountCallbackRequestRequestBody {
	res := &DestinationAccountCallbackRequestRequestBody{
		ReferenceNumber:     v.ReferenceNumber,
		MobileNumber:        v.MobileNumber,
		Amount:              v.Amount,
		Narration:           v.Narration,
		TransactionID:       v.TransactionID,
		ResponseCode:        v.ResponseCode,
		ResponseDescription: v.ResponseDescription,
	}

	return res
}

// marshalSourceAccountCallbackRequestRequestBodyToConnectSourceAccountCallbackRequest
// builds a value of type *connect.SourceAccountCallbackRequest from a value of
// type *SourceAccountCallbackRequestRequestBody.
func marshalSourceAccountCallbackRequestRequestBodyToConnectSourceAccountCallbackRequest(v *SourceAccountCallbackRequestRequestBody) *connect.SourceAccountCallbackRequest {
	res := &connect.SourceAccountCallbackRequest{
		AccountNumber:       v.AccountNumber,
		Amount:              v.Amount,
		TransactionCurrency: v.TransactionCurrency,
		Narration:           v.Narration,
		ResponseCode:        v.ResponseCode,
		ResponseDescription: v.ResponseDescription,
	}

	return res
}

// marshalDestinationAccountCallbackRequestRequestBodyToConnectDestinationAccountCallbackRequest
// builds a value of type *connect.DestinationAccountCallbackRequest from a
// value of type *DestinationAccountCallbackRequestRequestBody.
func marshalDestinationAccountCallbackRequestRequestBodyToConnectDestinationAccountCallbackRequest(v *DestinationAccountCallbackRequestRequestBody) *connect.DestinationAccountCallbackRequest {
	res := &connect.DestinationAccountCallbackRequest{
		ReferenceNumber:     v.ReferenceNumber,
		MobileNumber:        v.MobileNumber,
		Amount:              v.Amount,
		Narration:           v.Narration,
		TransactionID:       v.TransactionID,
		ResponseCode:        v.ResponseCode,
		ResponseDescription: v.ResponseDescription,
	}

	return res
}
