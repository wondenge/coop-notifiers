// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/coop-notifiers/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	connect "github.com/wondenge/coop-notifiers/gen/connect"
	goa "goa.design/goa/v3/pkg"
)

// BuildIFTAccountToAccountPayload builds the payload for the connect
// IFTAccountToAccount endpoint from CLI flags.
func BuildIFTAccountToAccountPayload(connectIFTAccountToAccountBody string) (*connect.IFTAccountToAccountCallbackRequest, error) {
	var err error
	var body IFTAccountToAccountRequestBody
	{
		err = json.Unmarshal([]byte(connectIFTAccountToAccountBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Destinations\": {\n         \"Amount\": 777,\n         \"MobileNumber\": \"2547xxxxxxxx\",\n         \"Narration\": \"Electricity Payment\",\n         \"ReferenceNumber\": \"40ca18c6765086089a1_1\",\n         \"ResponseCode\": \"0\",\n         \"ResponseDescription\": \"Success\",\n         \"TransactionID\": \"116e68e0af0c38zY_NKE7HBQEIL\"\n      },\n      \"MessageCode\": \"0\",\n      \"MessageDateTime\": \"2017-12-04T09:27:00\",\n      \"MessageDescription\": \"FULL SUCCESS\",\n      \"MessageReference\": \"40ca18c6765086089a1\",\n      \"Source\": {\n         \"AccountNumber\": \"54321987654321\",\n         \"Amount\": 777,\n         \"Narration\": \"Electricity Payment\",\n         \"ResponseCode\": \"0\",\n         \"ResponseDescription\": \"Success\",\n         \"TransactionCurrency\": \"KES\"\n      }\n   }'")
		}
		if body.Source == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
		}
		if body.Destinations == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
		}
		if utf8.RuneCountInString(body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", body.MessageReference, utf8.RuneCountInString(body.MessageReference), 1, true))
		}
		if utf8.RuneCountInString(body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", body.MessageReference, utf8.RuneCountInString(body.MessageReference), 27, false))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", body.MessageDateTime, goa.FormatDateTime))

		if body.Source != nil {
			if err2 := ValidateSourceAccountCallbackRequestRequestBody(body.Source); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if body.Destinations != nil {
			if err2 := ValidateDestinationAccountCallbackRequestRequestBody(body.Destinations); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &connect.IFTAccountToAccountCallbackRequest{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
	}
	if body.Source != nil {
		v.Source = marshalSourceAccountCallbackRequestRequestBodyToConnectSourceAccountCallbackRequest(body.Source)
	}
	if body.Destinations != nil {
		v.Destinations = marshalDestinationAccountCallbackRequestRequestBodyToConnectDestinationAccountCallbackRequest(body.Destinations)
	}

	return v, nil
}

// BuildPesaLinkSendToAccountPayload builds the payload for the connect
// PesaLinkSendToAccount endpoint from CLI flags.
func BuildPesaLinkSendToAccountPayload(connectPesaLinkSendToAccountBody string) (*connect.PesaLinkSendToAccountCallbackRequest, error) {
	var err error
	var body PesaLinkSendToAccountRequestBody
	{
		err = json.Unmarshal([]byte(connectPesaLinkSendToAccountBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"CallBackUrl\": \"https://yourdomain.com/ft-callback\",\n      \"Destinations\": {\n         \"Amount\": 777,\n         \"MobileNumber\": \"2547xxxxxxxx\",\n         \"Narration\": \"Electricity Payment\",\n         \"ReferenceNumber\": \"40ca18c6765086089a1_1\",\n         \"ResponseCode\": \"0\",\n         \"ResponseDescription\": \"Success\",\n         \"TransactionID\": \"116e68e0af0c38zY_NKE7HBQEIL\"\n      },\n      \"MessageCode\": \"0\",\n      \"MessageDateTime\": \"2017-12-04T09:27:00\",\n      \"MessageDescription\": \"FULL SUCCESS\",\n      \"MessageReference\": \"40ca18c6765086089a1\",\n      \"Source\": {\n         \"AccountNumber\": \"54321987654321\",\n         \"Amount\": 777,\n         \"Narration\": \"Electricity Payment\",\n         \"ResponseCode\": \"0\",\n         \"ResponseDescription\": \"Success\",\n         \"TransactionCurrency\": \"KES\"\n      }\n   }'")
		}
		if body.Source == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
		}
		if body.Destinations == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
		}
		if utf8.RuneCountInString(body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", body.MessageReference, utf8.RuneCountInString(body.MessageReference), 1, true))
		}
		if utf8.RuneCountInString(body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", body.MessageReference, utf8.RuneCountInString(body.MessageReference), 27, false))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", body.MessageDateTime, goa.FormatDateTime))

		if body.Source != nil {
			if err2 := ValidateSourceAccountCallbackRequestRequestBody(body.Source); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if body.Destinations != nil {
			if err2 := ValidateDestinationAccountCallbackRequestRequestBody(body.Destinations); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &connect.PesaLinkSendToAccountCallbackRequest{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
		CallBackURL:        body.CallBackURL,
	}
	if body.Source != nil {
		v.Source = marshalSourceAccountCallbackRequestRequestBodyToConnectSourceAccountCallbackRequest(body.Source)
	}
	if body.Destinations != nil {
		v.Destinations = marshalDestinationAccountCallbackRequestRequestBodyToConnectDestinationAccountCallbackRequest(body.Destinations)
	}

	return v, nil
}

// BuildPesaLinkSendToPhonePayload builds the payload for the connect
// PesaLinkSendToPhone endpoint from CLI flags.
func BuildPesaLinkSendToPhonePayload(connectPesaLinkSendToPhoneBody string) (*connect.PesaLinkSendToPhoneCallbackRequest, error) {
	var err error
	var body PesaLinkSendToPhoneRequestBody
	{
		err = json.Unmarshal([]byte(connectPesaLinkSendToPhoneBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Destinations\": [\n         {\n            \"Amount\": 777,\n            \"MobileNumber\": \"2547xxxxxxxx\",\n            \"Narration\": \"Electricity Payment\",\n            \"ReferenceNumber\": \"40ca18c6765086089a1_1\",\n            \"ResponseCode\": \"0\",\n            \"ResponseDescription\": \"Success\",\n            \"TransactionID\": \"116e68e0af0c38zY_NKE7HBQEIL\"\n         }\n      ],\n      \"MessageCode\": \"0\",\n      \"MessageDateTime\": \"2017-12-04T09:27:00\",\n      \"MessageDescription\": \"FULL SUCCESS\",\n      \"MessageReference\": \"40ca18c6765086089a1\",\n      \"Source\": {\n         \"AccountNumber\": \"54321987654321\",\n         \"Amount\": 777,\n         \"Narration\": \"Electricity Payment\",\n         \"ResponseCode\": \"0\",\n         \"ResponseDescription\": \"Success\",\n         \"TransactionCurrency\": \"KES\"\n      }\n   }'")
		}
		if body.Source == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
		}
		if body.Destinations == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
		}
		if utf8.RuneCountInString(body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", body.MessageReference, utf8.RuneCountInString(body.MessageReference), 1, true))
		}
		if utf8.RuneCountInString(body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", body.MessageReference, utf8.RuneCountInString(body.MessageReference), 27, false))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", body.MessageDateTime, goa.FormatDateTime))

		if body.Source != nil {
			if err2 := ValidateSourceAccountCallbackRequestRequestBody(body.Source); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if len(body.Destinations) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Destinations", body.Destinations, len(body.Destinations), 1, true))
		}
		for _, e := range body.Destinations {
			if e != nil {
				if err2 := ValidateDestinationAccountCallbackRequestRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &connect.PesaLinkSendToPhoneCallbackRequest{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
	}
	if body.Source != nil {
		v.Source = marshalSourceAccountCallbackRequestRequestBodyToConnectSourceAccountCallbackRequest(body.Source)
	}
	if body.Destinations != nil {
		v.Destinations = make([]*connect.DestinationAccountCallbackRequest, len(body.Destinations))
		for i, val := range body.Destinations {
			v.Destinations[i] = marshalDestinationAccountCallbackRequestRequestBodyToConnectDestinationAccountCallbackRequest(val)
		}
	}

	return v, nil
}

// BuildSendToMPesaPayload builds the payload for the connect SendToMPesa
// endpoint from CLI flags.
func BuildSendToMPesaPayload(connectSendToMPesaBody string) (*connect.SendToMpesaCallbackRequest, error) {
	var err error
	var body SendToMPesaRequestBody
	{
		err = json.Unmarshal([]byte(connectSendToMPesaBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"CallBackUrl\": \"https://yourdomain.com/ft-callback\",\n      \"Destinations\": {\n         \"Amount\": 777,\n         \"MobileNumber\": \"2547xxxxxxxx\",\n         \"Narration\": \"Electricity Payment\",\n         \"ReferenceNumber\": \"40ca18c6765086089a1_1\",\n         \"ResponseCode\": \"0\",\n         \"ResponseDescription\": \"Success\",\n         \"TransactionID\": \"116e68e0af0c38zY_NKE7HBQEIL\"\n      },\n      \"MessageCode\": \"0\",\n      \"MessageDateTime\": \"2017-12-04T09:27:00\",\n      \"MessageDescription\": \"FULL SUCCESS\",\n      \"MessageReference\": \"40ca18c6765086089a1\",\n      \"Source\": {\n         \"AccountNumber\": \"54321987654321\",\n         \"Amount\": 777,\n         \"Narration\": \"Electricity Payment\",\n         \"ResponseCode\": \"0\",\n         \"ResponseDescription\": \"Success\",\n         \"TransactionCurrency\": \"KES\"\n      }\n   }'")
		}
		if body.Source == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
		}
		if body.Destinations == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
		}
		if utf8.RuneCountInString(body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", body.MessageReference, utf8.RuneCountInString(body.MessageReference), 1, true))
		}
		if utf8.RuneCountInString(body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", body.MessageReference, utf8.RuneCountInString(body.MessageReference), 27, false))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", body.MessageDateTime, goa.FormatDateTime))

		if body.Source != nil {
			if err2 := ValidateSourceAccountCallbackRequestRequestBody(body.Source); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if body.Destinations != nil {
			if err2 := ValidateDestinationAccountCallbackRequestRequestBody(body.Destinations); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &connect.SendToMpesaCallbackRequest{
		MessageReference:   body.MessageReference,
		MessageDateTime:    body.MessageDateTime,
		MessageCode:        body.MessageCode,
		MessageDescription: body.MessageDescription,
		CallBackURL:        body.CallBackURL,
	}
	if body.Source != nil {
		v.Source = marshalSourceAccountCallbackRequestRequestBodyToConnectSourceAccountCallbackRequest(body.Source)
	}
	if body.Destinations != nil {
		v.Destinations = marshalDestinationAccountCallbackRequestRequestBodyToConnectDestinationAccountCallbackRequest(body.Destinations)
	}

	return v, nil
}
