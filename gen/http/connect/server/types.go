// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect HTTP server types
//
// Command:
// $ goa gen github.com/wondenge/coop-notifiers/design

package server

import (
	"unicode/utf8"

	connect "github.com/wondenge/coop-notifiers/gen/connect"
	goa "goa.design/goa/v3/pkg"
)

// IFTAccountToAccountRequestBody is the type of the "connect" service
// "IFTAccountToAccount" endpoint HTTP request body.
type IFTAccountToAccountRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string                                       `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
	Source             *SourceAccountCallbackRequestRequestBody      `form:"Source,omitempty" json:"Source,omitempty" xml:"Source,omitempty"`
	Destinations       *DestinationAccountCallbackRequestRequestBody `form:"Destinations,omitempty" json:"Destinations,omitempty" xml:"Destinations,omitempty"`
}

// PesaLinkSendToAccountRequestBody is the type of the "connect" service
// "PesaLinkSendToAccount" endpoint HTTP request body.
type PesaLinkSendToAccountRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
	// Your callback URL that will receive transaction processing results
	CallBackURL  *string                                       `form:"CallBackUrl,omitempty" json:"CallBackUrl,omitempty" xml:"CallBackUrl,omitempty"`
	Source       *SourceAccountCallbackRequestRequestBody      `form:"Source,omitempty" json:"Source,omitempty" xml:"Source,omitempty"`
	Destinations *DestinationAccountCallbackRequestRequestBody `form:"Destinations,omitempty" json:"Destinations,omitempty" xml:"Destinations,omitempty"`
}

// PesaLinkSendToPhoneRequestBody is the type of the "connect" service
// "PesaLinkSendToPhone" endpoint HTTP request body.
type PesaLinkSendToPhoneRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string                                         `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
	Source             *SourceAccountCallbackRequestRequestBody        `form:"Source,omitempty" json:"Source,omitempty" xml:"Source,omitempty"`
	Destinations       []*DestinationAccountCallbackRequestRequestBody `form:"Destinations,omitempty" json:"Destinations,omitempty" xml:"Destinations,omitempty"`
}

// SendToMPesaRequestBody is the type of the "connect" service "SendToMPesa"
// endpoint HTTP request body.
type SendToMPesaRequestBody struct {
	// Your unique transaction request message identifier
	MessageReference *string `form:"MessageReference,omitempty" json:"MessageReference,omitempty" xml:"MessageReference,omitempty"`
	// Acknowledgement message creation timestamp
	MessageDateTime *string `form:"MessageDateTime,omitempty" json:"MessageDateTime,omitempty" xml:"MessageDateTime,omitempty"`
	// Message Response Code
	MessageCode *string `form:"MessageCode,omitempty" json:"MessageCode,omitempty" xml:"MessageCode,omitempty"`
	// Message Code description
	MessageDescription *string `form:"MessageDescription,omitempty" json:"MessageDescription,omitempty" xml:"MessageDescription,omitempty"`
	// Your callback URL that will receive transaction processing results
	CallBackURL  *string                                       `form:"CallBackUrl,omitempty" json:"CallBackUrl,omitempty" xml:"CallBackUrl,omitempty"`
	Source       *SourceAccountCallbackRequestRequestBody      `form:"Source,omitempty" json:"Source,omitempty" xml:"Source,omitempty"`
	Destinations *DestinationAccountCallbackRequestRequestBody `form:"Destinations,omitempty" json:"Destinations,omitempty" xml:"Destinations,omitempty"`
}

// IFTAccountToAccountPartialSuccessResponseBody is the type of the "connect"
// service "IFTAccountToAccount" endpoint HTTP response body for the
// "partial_success" error.
type IFTAccountToAccountPartialSuccessResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IFTAccountToAccountFullFailureResponseBody is the type of the "connect"
// service "IFTAccountToAccount" endpoint HTTP response body for the
// "full_failure" error.
type IFTAccountToAccountFullFailureResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PesaLinkSendToAccountPartialSuccessResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "partial_success" error.
type PesaLinkSendToAccountPartialSuccessResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PesaLinkSendToAccountFullFailureResponseBody is the type of the "connect"
// service "PesaLinkSendToAccount" endpoint HTTP response body for the
// "full_failure" error.
type PesaLinkSendToAccountFullFailureResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PesaLinkSendToPhonePartialSuccessResponseBody is the type of the "connect"
// service "PesaLinkSendToPhone" endpoint HTTP response body for the
// "partial_success" error.
type PesaLinkSendToPhonePartialSuccessResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PesaLinkSendToPhoneFullFailureResponseBody is the type of the "connect"
// service "PesaLinkSendToPhone" endpoint HTTP response body for the
// "full_failure" error.
type PesaLinkSendToPhoneFullFailureResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SendToMPesaPartialSuccessResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "partial_success" error.
type SendToMPesaPartialSuccessResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SendToMPesaFullFailureResponseBody is the type of the "connect" service
// "SendToMPesa" endpoint HTTP response body for the "full_failure" error.
type SendToMPesaFullFailureResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SourceAccountCallbackRequestRequestBody is used to define fields on request
// body types.
type SourceAccountCallbackRequestRequestBody struct {
	// Posting account number
	AccountNumber *string `form:"AccountNumber,omitempty" json:"AccountNumber,omitempty" xml:"AccountNumber,omitempty"`
	// Transaction Amount
	Amount *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Posting account currency in ISO Currency Code
	TransactionCurrency *string `form:"TransactionCurrency,omitempty" json:"TransactionCurrency,omitempty" xml:"TransactionCurrency,omitempty"`
	// Posting account transaction narration
	Narration *string `form:"Narration,omitempty" json:"Narration,omitempty" xml:"Narration,omitempty"`
	// Posting leg response code
	ResponseCode *string `form:"ResponseCode,omitempty" json:"ResponseCode,omitempty" xml:"ResponseCode,omitempty"`
	// Posting leg response description
	ResponseDescription *string `form:"ResponseDescription,omitempty" json:"ResponseDescription,omitempty" xml:"ResponseDescription,omitempty"`
}

// DestinationAccountCallbackRequestRequestBody is used to define fields on
// request body types.
type DestinationAccountCallbackRequestRequestBody struct {
	// Unique posting reference for the transaction leg
	ReferenceNumber *string `form:"ReferenceNumber,omitempty" json:"ReferenceNumber,omitempty" xml:"ReferenceNumber,omitempty"`
	// Recipient M-Pesa mobile number
	MobileNumber *string `form:"MobileNumber,omitempty" json:"MobileNumber,omitempty" xml:"MobileNumber,omitempty"`
	// Transaction Amount
	Amount *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Transaction posting narration
	Narration *string `form:"Narration,omitempty" json:"Narration,omitempty" xml:"Narration,omitempty"`
	// Co-operative Bank's processed transaction number concatenated with M-Pesa
	// transaction number
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Posting leg response code
	ResponseCode *string `form:"ResponseCode,omitempty" json:"ResponseCode,omitempty" xml:"ResponseCode,omitempty"`
	// Posting leg response description
	ResponseDescription *string `form:"ResponseDescription,omitempty" json:"ResponseDescription,omitempty" xml:"ResponseDescription,omitempty"`
}

// NewIFTAccountToAccountPartialSuccessResponseBody builds the HTTP response
// body from the result of the "IFTAccountToAccount" endpoint of the "connect"
// service.
func NewIFTAccountToAccountPartialSuccessResponseBody(res *goa.ServiceError) *IFTAccountToAccountPartialSuccessResponseBody {
	body := &IFTAccountToAccountPartialSuccessResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIFTAccountToAccountFullFailureResponseBody builds the HTTP response body
// from the result of the "IFTAccountToAccount" endpoint of the "connect"
// service.
func NewIFTAccountToAccountFullFailureResponseBody(res *goa.ServiceError) *IFTAccountToAccountFullFailureResponseBody {
	body := &IFTAccountToAccountFullFailureResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPesaLinkSendToAccountPartialSuccessResponseBody builds the HTTP response
// body from the result of the "PesaLinkSendToAccount" endpoint of the
// "connect" service.
func NewPesaLinkSendToAccountPartialSuccessResponseBody(res *goa.ServiceError) *PesaLinkSendToAccountPartialSuccessResponseBody {
	body := &PesaLinkSendToAccountPartialSuccessResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPesaLinkSendToAccountFullFailureResponseBody builds the HTTP response
// body from the result of the "PesaLinkSendToAccount" endpoint of the
// "connect" service.
func NewPesaLinkSendToAccountFullFailureResponseBody(res *goa.ServiceError) *PesaLinkSendToAccountFullFailureResponseBody {
	body := &PesaLinkSendToAccountFullFailureResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPesaLinkSendToPhonePartialSuccessResponseBody builds the HTTP response
// body from the result of the "PesaLinkSendToPhone" endpoint of the "connect"
// service.
func NewPesaLinkSendToPhonePartialSuccessResponseBody(res *goa.ServiceError) *PesaLinkSendToPhonePartialSuccessResponseBody {
	body := &PesaLinkSendToPhonePartialSuccessResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPesaLinkSendToPhoneFullFailureResponseBody builds the HTTP response body
// from the result of the "PesaLinkSendToPhone" endpoint of the "connect"
// service.
func NewPesaLinkSendToPhoneFullFailureResponseBody(res *goa.ServiceError) *PesaLinkSendToPhoneFullFailureResponseBody {
	body := &PesaLinkSendToPhoneFullFailureResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSendToMPesaPartialSuccessResponseBody builds the HTTP response body from
// the result of the "SendToMPesa" endpoint of the "connect" service.
func NewSendToMPesaPartialSuccessResponseBody(res *goa.ServiceError) *SendToMPesaPartialSuccessResponseBody {
	body := &SendToMPesaPartialSuccessResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSendToMPesaFullFailureResponseBody builds the HTTP response body from the
// result of the "SendToMPesa" endpoint of the "connect" service.
func NewSendToMPesaFullFailureResponseBody(res *goa.ServiceError) *SendToMPesaFullFailureResponseBody {
	body := &SendToMPesaFullFailureResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIFTAccountToAccountCallbackRequest builds a connect service
// IFTAccountToAccount endpoint payload.
func NewIFTAccountToAccountCallbackRequest(body *IFTAccountToAccountRequestBody) *connect.IFTAccountToAccountCallbackRequest {
	v := &connect.IFTAccountToAccountCallbackRequest{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}
	v.Source = unmarshalSourceAccountCallbackRequestRequestBodyToConnectSourceAccountCallbackRequest(body.Source)
	v.Destinations = unmarshalDestinationAccountCallbackRequestRequestBodyToConnectDestinationAccountCallbackRequest(body.Destinations)

	return v
}

// NewPesaLinkSendToAccountCallbackRequest builds a connect service
// PesaLinkSendToAccount endpoint payload.
func NewPesaLinkSendToAccountCallbackRequest(body *PesaLinkSendToAccountRequestBody) *connect.PesaLinkSendToAccountCallbackRequest {
	v := &connect.PesaLinkSendToAccountCallbackRequest{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
		CallBackURL:        body.CallBackURL,
	}
	v.Source = unmarshalSourceAccountCallbackRequestRequestBodyToConnectSourceAccountCallbackRequest(body.Source)
	v.Destinations = unmarshalDestinationAccountCallbackRequestRequestBodyToConnectDestinationAccountCallbackRequest(body.Destinations)

	return v
}

// NewPesaLinkSendToPhoneCallbackRequest builds a connect service
// PesaLinkSendToPhone endpoint payload.
func NewPesaLinkSendToPhoneCallbackRequest(body *PesaLinkSendToPhoneRequestBody) *connect.PesaLinkSendToPhoneCallbackRequest {
	v := &connect.PesaLinkSendToPhoneCallbackRequest{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
	}
	v.Source = unmarshalSourceAccountCallbackRequestRequestBodyToConnectSourceAccountCallbackRequest(body.Source)
	v.Destinations = make([]*connect.DestinationAccountCallbackRequest, len(body.Destinations))
	for i, val := range body.Destinations {
		v.Destinations[i] = unmarshalDestinationAccountCallbackRequestRequestBodyToConnectDestinationAccountCallbackRequest(val)
	}

	return v
}

// NewSendToMPesaSendToMpesaCallbackRequest builds a connect service
// SendToMPesa endpoint payload.
func NewSendToMPesaSendToMpesaCallbackRequest(body *SendToMPesaRequestBody) *connect.SendToMpesaCallbackRequest {
	v := &connect.SendToMpesaCallbackRequest{
		MessageReference:   *body.MessageReference,
		MessageDateTime:    *body.MessageDateTime,
		MessageCode:        *body.MessageCode,
		MessageDescription: *body.MessageDescription,
		CallBackURL:        body.CallBackURL,
	}
	v.Source = unmarshalSourceAccountCallbackRequestRequestBodyToConnectSourceAccountCallbackRequest(body.Source)
	v.Destinations = unmarshalDestinationAccountCallbackRequestRequestBodyToConnectDestinationAccountCallbackRequest(body.Destinations)

	return v
}

// ValidateIFTAccountToAccountRequestBody runs the validations defined on
// IFTAccountToAccountRequestBody
func ValidateIFTAccountToAccountRequestBody(body *IFTAccountToAccountRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
	}
	if body.Destinations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	if body.Source != nil {
		if err2 := ValidateSourceAccountCallbackRequestRequestBody(body.Source); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Destinations != nil {
		if err2 := ValidateDestinationAccountCallbackRequestRequestBody(body.Destinations); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePesaLinkSendToAccountRequestBody runs the validations defined on
// PesaLinkSendToAccountRequestBody
func ValidatePesaLinkSendToAccountRequestBody(body *PesaLinkSendToAccountRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
	}
	if body.Destinations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	if body.Source != nil {
		if err2 := ValidateSourceAccountCallbackRequestRequestBody(body.Source); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Destinations != nil {
		if err2 := ValidateDestinationAccountCallbackRequestRequestBody(body.Destinations); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePesaLinkSendToPhoneRequestBody runs the validations defined on
// PesaLinkSendToPhoneRequestBody
func ValidatePesaLinkSendToPhoneRequestBody(body *PesaLinkSendToPhoneRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
	}
	if body.Destinations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	if body.Source != nil {
		if err2 := ValidateSourceAccountCallbackRequestRequestBody(body.Source); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if len(body.Destinations) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Destinations", body.Destinations, len(body.Destinations), 1, true))
	}
	for _, e := range body.Destinations {
		if e != nil {
			if err2 := ValidateDestinationAccountCallbackRequestRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSendToMPesaRequestBody runs the validations defined on
// SendToMPesaRequestBody
func ValidateSendToMPesaRequestBody(body *SendToMPesaRequestBody) (err error) {
	if body.MessageReference == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageReference", "body"))
	}
	if body.MessageDateTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDateTime", "body"))
	}
	if body.MessageCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageCode", "body"))
	}
	if body.MessageDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MessageDescription", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Source", "body"))
	}
	if body.Destinations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Destinations", "body"))
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 1, true))
		}
	}
	if body.MessageReference != nil {
		if utf8.RuneCountInString(*body.MessageReference) > 27 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MessageReference", *body.MessageReference, utf8.RuneCountInString(*body.MessageReference), 27, false))
		}
	}
	if body.MessageDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.MessageDateTime", *body.MessageDateTime, goa.FormatDateTime))
	}
	if body.Source != nil {
		if err2 := ValidateSourceAccountCallbackRequestRequestBody(body.Source); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Destinations != nil {
		if err2 := ValidateDestinationAccountCallbackRequestRequestBody(body.Destinations); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSourceAccountCallbackRequestRequestBody runs the validations defined
// on SourceAccountCallbackRequestRequestBody
func ValidateSourceAccountCallbackRequestRequestBody(body *SourceAccountCallbackRequestRequestBody) (err error) {
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AccountNumber", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "body"))
	}
	if body.TransactionCurrency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("TransactionCurrency", "body"))
	}
	if body.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Narration", "body"))
	}
	if body.ResponseCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ResponseCode", "body"))
	}
	if body.ResponseDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ResponseDescription", "body"))
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) < 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, true))
		}
	}
	if body.AccountNumber != nil {
		if utf8.RuneCountInString(*body.AccountNumber) > 14 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.AccountNumber", *body.AccountNumber, utf8.RuneCountInString(*body.AccountNumber), 14, false))
		}
	}
	if body.Amount != nil {
		if *body.Amount < 0.01 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", *body.Amount, 0.01, true))
		}
	}
	if body.Amount != nil {
		if *body.Amount > 999999.99 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", *body.Amount, 999999.99, false))
		}
	}
	if body.TransactionCurrency != nil {
		if !(*body.TransactionCurrency == "USD" || *body.TransactionCurrency == "KES" || *body.TransactionCurrency == "EUR" || *body.TransactionCurrency == "GBP" || *body.TransactionCurrency == "AUD" || *body.TransactionCurrency == "CHF" || *body.TransactionCurrency == "CAD" || *body.TransactionCurrency == "ZAR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.TransactionCurrency", *body.TransactionCurrency, []interface{}{"USD", "KES", "EUR", "GBP", "AUD", "CHF", "CAD", "ZAR"}))
		}
	}
	if body.Narration != nil {
		if utf8.RuneCountInString(*body.Narration) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", *body.Narration, utf8.RuneCountInString(*body.Narration), 1, true))
		}
	}
	if body.Narration != nil {
		if utf8.RuneCountInString(*body.Narration) > 25 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", *body.Narration, utf8.RuneCountInString(*body.Narration), 25, false))
		}
	}
	return
}

// ValidateDestinationAccountCallbackRequestRequestBody runs the validations
// defined on DestinationAccountCallbackRequestRequestBody
func ValidateDestinationAccountCallbackRequestRequestBody(body *DestinationAccountCallbackRequestRequestBody) (err error) {
	if body.ReferenceNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ReferenceNumber", "body"))
	}
	if body.MobileNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("MobileNumber", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "body"))
	}
	if body.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Narration", "body"))
	}
	if body.ReferenceNumber != nil {
		if utf8.RuneCountInString(*body.ReferenceNumber) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ReferenceNumber", *body.ReferenceNumber, utf8.RuneCountInString(*body.ReferenceNumber), 1, true))
		}
	}
	if body.ReferenceNumber != nil {
		if utf8.RuneCountInString(*body.ReferenceNumber) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ReferenceNumber", *body.ReferenceNumber, utf8.RuneCountInString(*body.ReferenceNumber), 30, false))
		}
	}
	if body.MobileNumber != nil {
		if utf8.RuneCountInString(*body.MobileNumber) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MobileNumber", *body.MobileNumber, utf8.RuneCountInString(*body.MobileNumber), 10, true))
		}
	}
	if body.MobileNumber != nil {
		if utf8.RuneCountInString(*body.MobileNumber) > 13 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.MobileNumber", *body.MobileNumber, utf8.RuneCountInString(*body.MobileNumber), 13, false))
		}
	}
	if body.Amount != nil {
		if *body.Amount < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", *body.Amount, 0, true))
		}
	}
	if body.Amount != nil {
		if *body.Amount > 999999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Amount", *body.Amount, 999999, false))
		}
	}
	if body.Narration != nil {
		if utf8.RuneCountInString(*body.Narration) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", *body.Narration, utf8.RuneCountInString(*body.Narration), 1, true))
		}
	}
	if body.Narration != nil {
		if utf8.RuneCountInString(*body.Narration) > 25 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Narration", *body.Narration, utf8.RuneCountInString(*body.Narration), 25, false))
		}
	}
	return
}
