// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/coop-notifiers/design

package server

import (
	"context"
	"io"
	"net/http"

	connect "github.com/wondenge/coop-notifiers/gen/connect"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeIFTAccountToAccountResponse returns an encoder for responses returned
// by the connect IFTAccountToAccount endpoint.
func EncodeIFTAccountToAccountResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeIFTAccountToAccountRequest returns a decoder for requests sent to the
// connect IFTAccountToAccount endpoint.
func DecodeIFTAccountToAccountRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body IFTAccountToAccountRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateIFTAccountToAccountRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewIFTAccountToAccountCallbackRequest(&body)

		return payload, nil
	}
}

// EncodeIFTAccountToAccountError returns an encoder for errors returned by the
// IFTAccountToAccount connect endpoint.
func EncodeIFTAccountToAccountError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "partial_success":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIFTAccountToAccountPartialSuccessResponseBody(res)
			}
			w.Header().Set("goa-error", "partial_success")
			w.WriteHeader(http.StatusMultiStatus)
			return enc.Encode(body)
		case "full_failure":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIFTAccountToAccountFullFailureResponseBody(res)
			}
			w.Header().Set("goa-error", "full_failure")
			w.WriteHeader(http.StatusMultiStatus)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodePesaLinkSendToAccountResponse returns an encoder for responses
// returned by the connect PesaLinkSendToAccount endpoint.
func EncodePesaLinkSendToAccountResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePesaLinkSendToAccountRequest returns a decoder for requests sent to
// the connect PesaLinkSendToAccount endpoint.
func DecodePesaLinkSendToAccountRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PesaLinkSendToAccountRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePesaLinkSendToAccountRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewPesaLinkSendToAccountCallbackRequest(&body)

		return payload, nil
	}
}

// EncodePesaLinkSendToAccountError returns an encoder for errors returned by
// the PesaLinkSendToAccount connect endpoint.
func EncodePesaLinkSendToAccountError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "partial_success":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPesaLinkSendToAccountPartialSuccessResponseBody(res)
			}
			w.Header().Set("goa-error", "partial_success")
			w.WriteHeader(http.StatusMultiStatus)
			return enc.Encode(body)
		case "full_failure":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPesaLinkSendToAccountFullFailureResponseBody(res)
			}
			w.Header().Set("goa-error", "full_failure")
			w.WriteHeader(http.StatusMultiStatus)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodePesaLinkSendToPhoneResponse returns an encoder for responses returned
// by the connect PesaLinkSendToPhone endpoint.
func EncodePesaLinkSendToPhoneResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePesaLinkSendToPhoneRequest returns a decoder for requests sent to the
// connect PesaLinkSendToPhone endpoint.
func DecodePesaLinkSendToPhoneRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PesaLinkSendToPhoneRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePesaLinkSendToPhoneRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewPesaLinkSendToPhoneCallbackRequest(&body)

		return payload, nil
	}
}

// EncodePesaLinkSendToPhoneError returns an encoder for errors returned by the
// PesaLinkSendToPhone connect endpoint.
func EncodePesaLinkSendToPhoneError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "partial_success":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPesaLinkSendToPhonePartialSuccessResponseBody(res)
			}
			w.Header().Set("goa-error", "partial_success")
			w.WriteHeader(http.StatusMultiStatus)
			return enc.Encode(body)
		case "full_failure":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPesaLinkSendToPhoneFullFailureResponseBody(res)
			}
			w.Header().Set("goa-error", "full_failure")
			w.WriteHeader(http.StatusMultiStatus)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeSendToMPesaResponse returns an encoder for responses returned by the
// connect SendToMPesa endpoint.
func EncodeSendToMPesaResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSendToMPesaRequest returns a decoder for requests sent to the connect
// SendToMPesa endpoint.
func DecodeSendToMPesaRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SendToMPesaRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSendToMPesaRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSendToMPesaSendToMpesaCallbackRequest(&body)

		return payload, nil
	}
}

// EncodeSendToMPesaError returns an encoder for errors returned by the
// SendToMPesa connect endpoint.
func EncodeSendToMPesaError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "partial_success":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSendToMPesaPartialSuccessResponseBody(res)
			}
			w.Header().Set("goa-error", "partial_success")
			w.WriteHeader(http.StatusMultiStatus)
			return enc.Encode(body)
		case "full_failure":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSendToMPesaFullFailureResponseBody(res)
			}
			w.Header().Set("goa-error", "full_failure")
			w.WriteHeader(http.StatusMultiStatus)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalSourceAccountCallbackRequestRequestBodyToConnectSourceAccountCallbackRequest
// builds a value of type *connect.SourceAccountCallbackRequest from a value of
// type *SourceAccountCallbackRequestRequestBody.
func unmarshalSourceAccountCallbackRequestRequestBodyToConnectSourceAccountCallbackRequest(v *SourceAccountCallbackRequestRequestBody) *connect.SourceAccountCallbackRequest {
	res := &connect.SourceAccountCallbackRequest{
		AccountNumber:       *v.AccountNumber,
		Amount:              *v.Amount,
		TransactionCurrency: *v.TransactionCurrency,
		Narration:           *v.Narration,
		ResponseCode:        *v.ResponseCode,
		ResponseDescription: *v.ResponseDescription,
	}

	return res
}

// unmarshalDestinationAccountCallbackRequestRequestBodyToConnectDestinationAccountCallbackRequest
// builds a value of type *connect.DestinationAccountCallbackRequest from a
// value of type *DestinationAccountCallbackRequestRequestBody.
func unmarshalDestinationAccountCallbackRequestRequestBodyToConnectDestinationAccountCallbackRequest(v *DestinationAccountCallbackRequestRequestBody) *connect.DestinationAccountCallbackRequest {
	res := &connect.DestinationAccountCallbackRequest{
		ReferenceNumber:     *v.ReferenceNumber,
		MobileNumber:        *v.MobileNumber,
		Amount:              *v.Amount,
		Narration:           *v.Narration,
		TransactionID:       v.TransactionID,
		ResponseCode:        v.ResponseCode,
		ResponseDescription: v.ResponseDescription,
	}

	return res
}
