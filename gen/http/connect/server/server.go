// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect HTTP server
//
// Command:
// $ goa gen github.com/wondenge/coop-notifiers/design

package server

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	connect "github.com/wondenge/coop-notifiers/gen/connect"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the connect service endpoint HTTP handlers.
type Server struct {
	Mounts                []*MountPoint
	IFTAccountToAccount   http.Handler
	PesaLinkSendToAccount http.Handler
	PesaLinkSendToPhone   http.Handler
	SendToMPesa           http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the connect service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *connect.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"IFTAccountToAccount", "POST", "/callbacks/coop-bank/FundsTransfer/Internal/A2A/2.0.0"},
			{"PesaLinkSendToAccount", "POST", "/callbacks/coop-bank/FundsTransfer/External/A2A/PesaLink/1.0.0"},
			{"PesaLinkSendToPhone", "POST", "/callbacks/coop-bank/FundsTransfer/External/A2M/PesaLink/1.0.0"},
			{"SendToMPesa", "POST", "/callbacks/coop-bank/FundsTransfer/External/A2M/Mpesa/v1.0.0"},
		},
		IFTAccountToAccount:   NewIFTAccountToAccountHandler(e.IFTAccountToAccount, mux, decoder, encoder, errhandler, formatter),
		PesaLinkSendToAccount: NewPesaLinkSendToAccountHandler(e.PesaLinkSendToAccount, mux, decoder, encoder, errhandler, formatter),
		PesaLinkSendToPhone:   NewPesaLinkSendToPhoneHandler(e.PesaLinkSendToPhone, mux, decoder, encoder, errhandler, formatter),
		SendToMPesa:           NewSendToMPesaHandler(e.SendToMPesa, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "connect" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.IFTAccountToAccount = m(s.IFTAccountToAccount)
	s.PesaLinkSendToAccount = m(s.PesaLinkSendToAccount)
	s.PesaLinkSendToPhone = m(s.PesaLinkSendToPhone)
	s.SendToMPesa = m(s.SendToMPesa)
}

// Mount configures the mux to serve the connect endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountIFTAccountToAccountHandler(mux, h.IFTAccountToAccount)
	MountPesaLinkSendToAccountHandler(mux, h.PesaLinkSendToAccount)
	MountPesaLinkSendToPhoneHandler(mux, h.PesaLinkSendToPhone)
	MountSendToMPesaHandler(mux, h.SendToMPesa)
}

// MountIFTAccountToAccountHandler configures the mux to serve the "connect"
// service "IFTAccountToAccount" endpoint.
func MountIFTAccountToAccountHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/coop-bank/FundsTransfer/Internal/A2A/2.0.0", f)
}

// NewIFTAccountToAccountHandler creates a HTTP handler which loads the HTTP
// request and calls the "connect" service "IFTAccountToAccount" endpoint.
func NewIFTAccountToAccountHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeIFTAccountToAccountRequest(mux, decoder)
		encodeResponse = EncodeIFTAccountToAccountResponse(encoder)
		encodeError    = EncodeIFTAccountToAccountError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "IFTAccountToAccount")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountPesaLinkSendToAccountHandler configures the mux to serve the "connect"
// service "PesaLinkSendToAccount" endpoint.
func MountPesaLinkSendToAccountHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/coop-bank/FundsTransfer/External/A2A/PesaLink/1.0.0", f)
}

// NewPesaLinkSendToAccountHandler creates a HTTP handler which loads the HTTP
// request and calls the "connect" service "PesaLinkSendToAccount" endpoint.
func NewPesaLinkSendToAccountHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodePesaLinkSendToAccountRequest(mux, decoder)
		encodeResponse = EncodePesaLinkSendToAccountResponse(encoder)
		encodeError    = EncodePesaLinkSendToAccountError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "PesaLinkSendToAccount")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountPesaLinkSendToPhoneHandler configures the mux to serve the "connect"
// service "PesaLinkSendToPhone" endpoint.
func MountPesaLinkSendToPhoneHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/coop-bank/FundsTransfer/External/A2M/PesaLink/1.0.0", f)
}

// NewPesaLinkSendToPhoneHandler creates a HTTP handler which loads the HTTP
// request and calls the "connect" service "PesaLinkSendToPhone" endpoint.
func NewPesaLinkSendToPhoneHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodePesaLinkSendToPhoneRequest(mux, decoder)
		encodeResponse = EncodePesaLinkSendToPhoneResponse(encoder)
		encodeError    = EncodePesaLinkSendToPhoneError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "PesaLinkSendToPhone")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSendToMPesaHandler configures the mux to serve the "connect" service
// "SendToMPesa" endpoint.
func MountSendToMPesaHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/coop-bank/FundsTransfer/External/A2M/Mpesa/v1.0.0", f)
}

// NewSendToMPesaHandler creates a HTTP handler which loads the HTTP request
// and calls the "connect" service "SendToMPesa" endpoint.
func NewSendToMPesaHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSendToMPesaRequest(mux, decoder)
		encodeResponse = EncodeSendToMPesaResponse(encoder)
		encodeError    = EncodeSendToMPesaError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "SendToMPesa")
		ctx = context.WithValue(ctx, goa.ServiceKey, "connect")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
