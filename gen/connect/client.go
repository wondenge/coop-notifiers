// Code generated by goa v3.1.3, DO NOT EDIT.
//
// connect client
//
// Command:
// $ goa gen github.com/wondenge/coop-notifiers/design

package connect

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Client is the "connect" service client.
type Client struct {
	IFTAccountToAccountEndpoint   endpoint.Endpoint
	PesaLinkSendToAccountEndpoint endpoint.Endpoint
	PesaLinkSendToPhoneEndpoint   endpoint.Endpoint
	SendToMPesaEndpoint           endpoint.Endpoint
}

// NewClient initializes a "connect" service client given the endpoints.
func NewClient(iFTAccountToAccount, pesaLinkSendToAccount, pesaLinkSendToPhone, sendToMPesa endpoint.Endpoint) *Client {
	return &Client{
		IFTAccountToAccountEndpoint:   iFTAccountToAccount,
		PesaLinkSendToAccountEndpoint: pesaLinkSendToAccount,
		PesaLinkSendToPhoneEndpoint:   pesaLinkSendToPhone,
		SendToMPesaEndpoint:           sendToMPesa,
	}
}

// IFTAccountToAccount calls the "IFTAccountToAccount" endpoint of the
// "connect" service.
func (c *Client) IFTAccountToAccount(ctx context.Context, p *IFTAccountToAccountCallbackRequest) (res string, err error) {
	var ires interface{}
	ires, err = c.IFTAccountToAccountEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// PesaLinkSendToAccount calls the "PesaLinkSendToAccount" endpoint of the
// "connect" service.
func (c *Client) PesaLinkSendToAccount(ctx context.Context, p *PesaLinkSendToAccountCallbackRequest) (res string, err error) {
	var ires interface{}
	ires, err = c.PesaLinkSendToAccountEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// PesaLinkSendToPhone calls the "PesaLinkSendToPhone" endpoint of the
// "connect" service.
func (c *Client) PesaLinkSendToPhone(ctx context.Context, p *PesaLinkSendToPhoneCallbackRequest) (res string, err error) {
	var ires interface{}
	ires, err = c.PesaLinkSendToPhoneEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// SendToMPesa calls the "SendToMPesa" endpoint of the "connect" service.
func (c *Client) SendToMPesa(ctx context.Context, p *SendToMpesaCallbackRequest) (res string, err error) {
	var ires interface{}
	ires, err = c.SendToMPesaEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}
